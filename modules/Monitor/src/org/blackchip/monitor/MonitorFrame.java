/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MonitorFrame.java
 *
 * Created on Jul 27, 2009, 7:53:29 PM
 */

package org.blackchip.monitor;

import java.awt.GraphicsEnvironment;
import java.awt.Rectangle;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;
import org.blackchip.jv6502.cpu;
import org.blackchip.jv6502.label;
import org.blackchip.jv6502.mmu;
import org.blackchip.jv6502.util.Disassembler;
import org.blackchip.system.Brand;
import org.blackchip.system.MachControl;
import org.blackchip.system.MachListener;
import org.blackchip.system.sys;

/**
 *
 * @author mcgann
 */
public class MonitorFrame extends javax.swing.JFrame {

    private MachControl machControl;

    /** Creates new form MonitorFrame */
    public MonitorFrame(MachControl machControl) {
        this.machControl = machControl;
        initComponents();

       machControl.addListener(new MachListener() {
            public void started()
            {
                java.awt.EventQueue.invokeLater(new Runnable() {
                    public void run() {
                        onStartCPU();
                    }
                });
            }

            public void stopped()
            {
                java.awt.EventQueue.invokeLater(new Runnable() {
                    public void run() {
                        onStopCPU();
                    }
                });
            }

            public void exception(final Exception e) {
                java.awt.EventQueue.invokeLater(new Runnable() {
                    public void run() {
                        onExceptionCPU(e);
                    }
                });
            }

        });

        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        Rectangle bounds = ge.getMaximumWindowBounds();
        this.setBounds((int)bounds.getWidth() - this.getWidth() - 20,
                       (int)bounds.getHeight() - this.getHeight() - 20,
                       this.getWidth(), this.getHeight());

        outln("");
        outln("Welcome to the Mach-8");
        outln("");
        outln(Brand.REVISION);
        outln(Brand.DATE);
        outln("");
        if ( cpu.protectMemory ) {
            outln("Code restricted from $" + sys.toHex16(cpu.protectLow) + " to $" + sys.toHex16(cpu.protectHigh));
            outln("");
        }
        outln("Press BREAK to enter monitor commands");
        outln("Type 'help' in the monitor for a command list");

    }

    private void onStartCPU()
    {
        textPrompt.setEnabled(false);
        buttonRun.setEnabled(false);
        buttonStepOver.setEnabled(false);
        buttonStepOut.setEnabled(false);
        buttonBreak.setEnabled(true);
    }

    private void onStopCPU()
    {
        textPrompt.setEnabled(true);
        buttonRun.setEnabled(true);
        buttonStepOver.setEnabled(true);
        buttonStepOut.setEnabled(true);
        buttonBreak.setEnabled(false);

        if ( cpu.p.b ) {
            textOutput.append("\nBREAK:\n" + cpu.status() + "\n\n");
        }
        printNext();
        textPrompt.requestFocusInWindow();
    }

    private void onExceptionCPU(Exception e)
    {
        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        e.printStackTrace(pw);

        textOutput.append("\nTRAP:\n" + sw.getBuffer()); 
    }
    
    private void printNext()
    {
        Disassembler d = new Disassembler(cpu.pc());
        d.setPrintingSymbols(false);
        out("[next] " + d.next());        
    }
            

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        textOutput = new javax.swing.JTextArea();
        textPrompt = new javax.swing.JTextField();
        buttonExit = new javax.swing.JButton();
        buttonRun = new javax.swing.JButton();
        buttonBreak = new javax.swing.JButton();
        buttonStepOut = new javax.swing.JButton();
        buttonStepOver = new javax.swing.JButton();
        buttonStep = new javax.swing.JButton();
        buttonReboot = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Monitor");

        textOutput.setColumns(20);
        textOutput.setEditable(false);
        textOutput.setFont(new java.awt.Font("Monospaced", 0, 14));
        textOutput.setRows(5);
        textOutput.setFocusable(false);
        jScrollPane1.setViewportView(textOutput);

        textPrompt.setFont(new java.awt.Font("Monospaced", 0, 13));
        textPrompt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textPromptActionPerformed(evt);
            }
        });

        buttonExit.setText("Exit");
        buttonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExitActionPerformed(evt);
            }
        });

        buttonRun.setText("Run");
        buttonRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRunActionPerformed(evt);
            }
        });

        buttonBreak.setText("Break");
        buttonBreak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBreakActionPerformed(evt);
            }
        });

        buttonStepOut.setText("Step Out");
        buttonStepOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStepOutActionPerformed(evt);
            }
        });

        buttonStepOver.setText("Step Over");
        buttonStepOver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStepOverActionPerformed(evt);
            }
        });

        buttonStep.setText("Step");
        buttonStep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStepActionPerformed(evt);
            }
        });

        buttonReboot.setText("Reboot");
        buttonReboot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRebootActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 644, Short.MAX_VALUE)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, textPrompt, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 644, Short.MAX_VALUE)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(buttonExit)
                .add(6, 6, 6)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createSequentialGroup()
                        .add(277, 277, 277)
                        .add(buttonReboot))
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(buttonBreak, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(buttonStepOut, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 82, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(buttonStepOver, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 82, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(buttonRun, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(buttonStep, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(5, 5, 5))
        );

        layout.linkSize(new java.awt.Component[] {buttonBreak, buttonReboot, buttonRun, buttonStep, buttonStepOut, buttonStepOver}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(textPrompt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(buttonRun)
                    .add(buttonReboot)
                    .add(buttonStepOut))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(buttonStep)
                    .add(buttonStepOver)
                    .add(buttonBreak)
                    .add(buttonExit))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRunActionPerformed

        machControl.resume();
}//GEN-LAST:event_buttonRunActionPerformed

    private void buttonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_buttonExitActionPerformed

    private void textPromptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textPromptActionPerformed
        executeCommand();
    }//GEN-LAST:event_textPromptActionPerformed

    private void buttonStepOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStepOutActionPerformed
        machControl.stepOut();
        printNext();
    }//GEN-LAST:event_buttonStepOutActionPerformed

    private void buttonStepOverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStepOverActionPerformed
        machControl.stepOver();
        //printNext();
    }//GEN-LAST:event_buttonStepOverActionPerformed

    private void buttonBreakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBreakActionPerformed
        cpu.p.b = true;
    }//GEN-LAST:event_buttonBreakActionPerformed

    private void buttonStepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStepActionPerformed

        cpu.param.singleStep = true;
        cpu.resume();
        printNext();
    }//GEN-LAST:event_buttonStepActionPerformed

    private void buttonRebootActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRebootActionPerformed
        try
        {
            machControl.reboot();
        }
        catch ( IOException ie )
        {
            throw new IllegalStateException(ie);
        }
    }//GEN-LAST:event_buttonRebootActionPerformed

    private void out(String text)
    {
        textOutput.append(text);
        textOutput.setCaretPosition(textOutput.getText().length());
    }

    private void outln(String text)
    {
        out(text + "\n");
    }

    private void outln(String format, Object... args)
    {
        outln(String.format(format, args));
    }

    private void help() {
        outln("ABOUT                                Fun information!");
        outln("D     <start_address> <end_address>  Disassemble");
        outln("M     <start_address> <end_address>  Memory dump of address range");
        outln("PEEK  <address>                      Print 8-bit value at address");
        outln("PEEKW <address>                      Print 16-bit value at address");
        outln("POKE  <address> <value>              Store value at address");
        outln("POKEW <address> <value>              Store 16-bit value at address");
        outln("R                                    Register display");
        outln("RLOAD <resource>                     Load binary file from JAR file");
        outln("RUN   [address]                      Run at address (or continue)");
        outln("");
        outln("All addresses are hex values or labels");
    }

    private void about() {
        outln("CTRL-1 through CTRL-8: Change foreground color");
        outln("ALT-1  through ALT-8 : Change foreground color");
        outln("");
        outln("CTRL-9: Toggle reverse mode");
        outln("");
        outln("POKE BORDER_COLOR <value>: Change border color");
        outln("POKE BG_COLOR <value>    : Change background color");
        outln("POKE JIFFY_COUNT 0       : Turn cursor on");
        outln("POKE JIFFY_COUNT ff      : Turn cursor off");
        outln("");
        outln("RLOAD example/hello : Hello world!");
        outln("RLOAD example/color : Print text of the colors in the color");
        outln("RLOAD example/border: Endless loop through all border colors");
        outln("RLOAD example/text  : The matrix");
        outln("");
        outln("Type RUN after RLOAD");
    }
    
    private void executeCommand()
    {
        String command = textPrompt.getText().trim();
        if ( command.length() == 0 )
        {
            return;
        }
        outln("\n>>> " + command);
        
        String fs[] = command.split(" +");
        List<String> args = new ArrayList<String>();
        for ( String f: fs )
        {
            args.add(f);
        }
        
        String op = args.get(0); args.remove(0);
        if ( op.equalsIgnoreCase("D") ) 
        {
            disassemble(args);
        }
        else if ( op.equalsIgnoreCase("M") )
        {
            memory(args);
        }
        else if ( op.equalsIgnoreCase("PEEK") )
        {
            printAddress(args, false);
        }
        else if ( op.equalsIgnoreCase("PEEKW") )
        {
            printAddress(args, true);
        }
        else if ( op.equalsIgnoreCase("POKE") )
        {
            setAddress(args, false);
        }
        else if ( op.equalsIgnoreCase("POKEW") )
        {
            setAddress(args, true);
        }
        else if ( op.equalsIgnoreCase("R") ) 
        {
            printRegisters();
        }
        else if ( op.equalsIgnoreCase("RLOAD") )
        {
            load(args);
        }
        else if ( op.equalsIgnoreCase("RUN") ) 
        { 
            if ( args.size() == 0 ) 
            {
                machControl.resume();
            }
            else
            {
                doRun(args);
            }
        }
        else if ( op.equalsIgnoreCase("HELP") )
        {
            help();
        }
        else if ( op.equalsIgnoreCase("ABOUT") )
        {
            about();
        }
        else
        {
            outln("Unknown command: " + op);
        }
        clearPrompt();
    }

    private void clearPrompt()
    {
        textPrompt.setText("");
    }
    
    private void doRun(List<String> args)
    {
        int address = 0;
        try 
        {
            address = Integer.parseInt(args.get(0), 16);
        }
        catch ( NumberFormatException nfe )
        {
            outln("Invalid address");
            return;
        }
        boolean savePM = cpu.protectMemory;
        if ( savePM ) {
            cpu.protectMemory = false;
        }
        cpu.pc(address - 1);
        if ( savePM ) {
            cpu.protectMemory = true;
        }
        outln("Executing at $" + sys.toHex16(cpu.pc() + 1));
        //cpu.param.printExecution = true;
        machControl.resume();
        
    }
    
    private void load(List<String> args)
    {
        if ( args.size() != 1 )
        {
            outln("Expected 1 argument");
            return;
        }
        
        String file = "/asm/" + args.get(0) + ".mob";
        
        try
        {
            machControl.load(file);
            outln("Loaded " + file);
        } 
        catch ( IOException e ) 
        {
            outln("Load failed: " + e.getMessage());
        }
    }
    
    private void disassemble(List<String> args)
    {
        if ( args.size() != 2 )
        {
            outln("Expected 2 arguments");
            return;
        }

        try
        {
            int from = Integer.parseInt(args.get(0), 16);
            int to = Integer.parseInt(args.get(1), 16);

            if ( from < 0 || from > 0xffff || to < 0 || to > 0xffff ||
                    from >= to )
            {
                outln("Invalid address");
                return;
            }
            Disassembler d = new Disassembler(from);
            d.setPrintingSymbols(false);
            while ( d.getAddress() <= to )
            {
                out(d.next());
            }
        }
        catch ( NumberFormatException nfe )
        {
            outln("Invalid address");
        }

    }
    
    private void memory(List<String> args)
    {
        if ( args.size() != 2 )
        {
            outln("Expected 2 arguments");
            return;
        }

        try
        {
            int from = Integer.parseInt(args.get(0), 16);
            int to = Integer.parseInt(args.get(1), 16);

            if ( from < 0 || from > 0xffff || to < 0 || to > 0xffff ||
                    from >= to )
            {
                outln("Invalid address");
                return;
            }
            out(mmu.dump(from, to));
        }
        catch ( NumberFormatException nfe )
        {
            outln("Invalid address");
        }

    }

    private void printAddress(List<String> args, boolean word)
    {
        if ( args.size() != 1 )
        {
            outln("Expected 1 argument");
            return;
        }

        int address = 0;
        try
        {
            address = Integer.parseInt(args.get(0), 16);
        }
        catch ( NumberFormatException nfe )
        {
            address = label.memory(args.get(0));
            if ( address == -1 )
            {
                outln("Invalid address or label");
                return;
            }
        }

        if ( address < 0 || address > 0xffff )
        {
            outln("Invalid address");
            return;
        }
        if ( word )
        {
            int value = mmu.load16(address);
            outln("$" + sys.toHex16(address) + ": $" + sys.toHex16(value) +
                    " (" + value + ")");
        }
        else
        {
            int value = mmu.load(address);
            outln("$" + sys.toHex16(address) + ": $" + sys.toHex(value) +
                    " (" + value + ")");
        }
    }

    private void setAddress(List<String> args, boolean word)
    {
        if ( args.size() != 2 )
        {
            outln("Expected 2 arguments");
            return;
        }

        int address = 0;
        int value = 0;
        try
        {
            address = Integer.parseInt(args.get(0), 16);
        }
        catch ( NumberFormatException nfe )
        {
            address = label.memory(args.get(0));
            if ( address == -1 )
            {
                outln("Invalid address or label");
                return;
            }
        }

        try
        {
            value = Integer.parseInt(args.get(1), 16);
        }
        catch ( NumberFormatException nfe )
        {
            outln("Invalid value");
            return;
        }

        if ( word )
        {
            mmu.store16(address, value);
            outln("%s <= %s", sys.toHex16(address), sys.toHex16(value));
        }
        else
        {
            mmu.store(address, value);
            outln("%s <= %s", sys.toHex16(address), sys.toHex(value));
        }

    }

    private void printRegisters()
    {
        outln(cpu.status());
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonBreak;
    private javax.swing.JButton buttonExit;
    private javax.swing.JButton buttonReboot;
    private javax.swing.JButton buttonRun;
    private javax.swing.JButton buttonStep;
    private javax.swing.JButton buttonStepOut;
    private javax.swing.JButton buttonStepOver;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea textOutput;
    private javax.swing.JTextField textPrompt;
    // End of variables declaration//GEN-END:variables

}
